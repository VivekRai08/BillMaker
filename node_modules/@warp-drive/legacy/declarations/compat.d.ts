import { type Store } from "@warp-drive/core";
import type { ObjectValue } from "@warp-drive/core/types/json/raw";
import type { SingleResourceDocument } from "@warp-drive/core/types/spec/json-api-raw";
import { FetchManager } from "./compat/-private.js";
import type { AdapterPayload, MinimumAdapterInterface } from "./compat/legacy-network-handler/minimum-adapter-interface.js";
import type { MinimumSerializerInterface, SerializerOptions } from "./compat/legacy-network-handler/minimum-serializer-interface.js";
export { LegacyNetworkHandler } from "./compat/legacy-network-handler/legacy-network-handler.js";
export type { MinimumAdapterInterface, MinimumSerializerInterface, SerializerOptions, AdapterPayload };
export type LegacyStoreCompat = {
	_fetchManager: FetchManager;
	adapterFor(this: Store, modelName: string): MinimumAdapterInterface;
	adapterFor(this: Store, modelName: string, _allowMissing: true): MinimumAdapterInterface | undefined;
	serializerFor<K extends string>(modelName: K, _allowMissing?: boolean): MinimumSerializerInterface | null;
	normalize(modelName: string, payload: ObjectValue): ObjectValue;
	pushPayload(modelName: string, payload: ObjectValue): void;
	serializeRecord(record: unknown, options?: SerializerOptions): unknown;
	_adapterCache: Record<string, MinimumAdapterInterface & {
		store: Store;
	}>;
	_serializerCache: Record<string, MinimumSerializerInterface & {
		store: Store;
	}>;
};
export type CompatStore = Store & LegacyStoreCompat;
/**
Returns an instance of the adapter for a given type. For
example, `adapterFor('person')` will return an instance of
the adapter located at `app/adapters/person.js`

If no `person` adapter is found, this method will look
for an `application` adapter (the default adapter for
your entire application).

@public
@param {String} modelName
@return {Adapter}
*/
export declare function adapterFor(this: Store, modelName: string): MinimumAdapterInterface;
export declare function adapterFor(this: Store, modelName: string, _allowMissing: true): MinimumAdapterInterface | undefined;
/**
Returns an instance of the serializer for a given type. For
example, `serializerFor('person')` will return an instance of
`App.PersonSerializer`.

If no `App.PersonSerializer` is found, this method will look
for an `App.ApplicationSerializer` (the default serializer for
your entire application).

If a serializer cannot be found on the adapter, it will fall back
to an instance of `JSONSerializer`.

@public
@param {String} modelName the record to serialize
@return {Serializer}
*/
export declare function serializerFor(this: Store, modelName: string): MinimumSerializerInterface | null;
/**
`normalize` converts a json payload into the normalized form that
[push](../methods/push?anchor=push) expects.

Example

```js
socket.on('message', function(message) {
let modelName = message.model;
let data = message.data;
store.push(store.normalize(modelName, data));
});
```

@public
@param modelName The name of the model type for this payload
@return The normalized payload
*/
// TODO @runspired @deprecate users should call normalize on the associated serializer directly
export declare function normalize(this: Store, modelName: string, payload: ObjectValue): SingleResourceDocument;
/**
Push some raw data into the store.

This method can be used both to push in brand new
records, as well as to update existing records. You
can push in more than one type of object at once.
All objects should be in the format expected by the
serializer.

```js [app/serializers/application.js]
import RESTSerializer from '@ember-data/serializer/rest';

export default class ApplicationSerializer extends RESTSerializer;
```

```js
let pushData = {
posts: [
{ id: 1, postTitle: "Great post", commentIds: [2] }
],
comments: [
{ id: 2, commentBody: "Insightful comment" }
]
}

store.pushPayload(pushData);
```

By default, the data will be deserialized using a default
serializer (the application serializer if it exists).

Alternatively, `pushPayload` will accept a model type which
will determine which serializer will process the payload.

```js [app/serializers/application.js]
import RESTSerializer from '@ember-data/serializer/rest';

export default class ApplicationSerializer extends RESTSerializer;
```

```js [app/serializers/post.js]
import JSONSerializer from '@ember-data/serializer/json';

export default JSONSerializer;
```

```js
store.pushPayload(pushData); // Will use the application serializer
store.pushPayload('post', pushData); // Will use the post serializer
```

@public
@param {String} modelName Optionally, a model type used to determine which serializer will be used
@param {Object} inputPayload
*/
// TODO @runspired @deprecate pushPayload in favor of looking up the serializer
export declare function pushPayload(this: Store, modelName: string, inputPayload: ObjectValue): void;
// TODO @runspired @deprecate records should implement their own serialization if desired
export declare function serializeRecord(this: Store, record: unknown, options?: SerializerOptions): unknown;
export declare function cleanup(this: Store): void;
