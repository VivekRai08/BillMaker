import type { Store } from "@warp-drive/core";
import type { RequestCacheRequestState, RequestStateService } from "@warp-drive/core/store/-private";
import type { Cache } from "@warp-drive/core/types/cache";
import type { StableRecordIdentifier } from "@warp-drive/core/types/identifier";
import type { Errors } from "./errors.js";
import type { MinimalLegacyRecord } from "./model-methods.js";
/**
Historically EmberData managed a state machine
for each record, the localState for which
was reflected onto Model.

This implements the flags and stateName for backwards compat
with the state tree that used to be possible (listed below).

stateName and dirtyType are candidates for deprecation.

root
empty
deleted    // hidden from stateName
preloaded  // hidden from stateName

loading
empty     // hidden from stateName
preloaded // hidden from stateName

loaded
saved
updated
uncommitted
invalid
inFlight
created
uncommitted
invalid
inFlight

deleted
saved
new      // hidden from stateName
uncommitted
invalid
inFlight

@internal
*/
export default class RecordState {
	store: Store;
	identifier: StableRecordIdentifier;
	record: MinimalLegacyRecord;
	rs: RequestStateService;
	pendingCount: number;
	fulfilledCount: number;
	rejectedCount: number;
	cache: Cache;
	_errorRequests: RequestCacheRequestState[];
	_lastError: RequestCacheRequestState | null;
	handler: object;
	constructor(record: MinimalLegacyRecord);
	/** @internal */
	destroy(): void;
	/** @internal */
	notify(key: keyof this & string): void;
	/** @internal */
	updateInvalidErrors(errors: Errors): void;
	/** @internal */
	cleanErrorRequests(): void;
	isSaving: boolean;
	get isLoading(): boolean;
	get isLoaded(): boolean;
	get isSaved(): boolean;
	get isEmpty(): boolean;
	get isNew(): boolean;
	get isDeleted(): boolean;
	get isValid(): boolean;
	get isDirty(): boolean;
	get isError(): boolean;
	get adapterError(): unknown;
	get isPreloaded(): boolean;
	get stateName(): "root.loading" | "root.empty" | "root.deleted.inFlight" | "root.deleted.saved" | "root.deleted.invalid" | "root.deleted.uncommitted" | "root.loaded.created.inFlight" | "root.loaded.created.invalid" | "root.loaded.created.uncommitted" | "root.loaded.updated.inFlight" | "root.loaded.updated.invalid" | "root.loaded.updated.uncommitted" | "root.loaded.saved";
	get dirtyType(): "" | "deleted" | "created" | "updated";
}
