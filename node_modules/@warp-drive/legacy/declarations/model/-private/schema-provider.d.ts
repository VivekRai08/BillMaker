import type { Store } from "@warp-drive/core";
import type { SchemaService } from "@warp-drive/core/types";
import type { RecordIdentifier, StableRecordIdentifier } from "@warp-drive/core/types/identifier";
import type { ObjectValue } from "@warp-drive/core/types/json/raw";
import type { Derivation, HashFn, Transformation } from "@warp-drive/core/types/schema/concepts";
import type { ArrayField, DerivedField, GenericField, HashField, LegacyField, ObjectField, ObjectSchema, ResourceSchema } from "@warp-drive/core/types/schema/fields";
import type { ModelFactory, ModelStore } from "./model.js";
type AttributesSchema = ReturnType<Exclude<SchemaService["attributesDefinitionFor"], undefined>>;
type RelationshipsSchema = ReturnType<Exclude<SchemaService["relationshipsDefinitionFor"], undefined>>;
export interface ModelSchemaProvider {
	attributesDefinitionFor(resource: RecordIdentifier | {
		type: string;
	}): AttributesSchema;
	relationshipsDefinitionFor(resource: RecordIdentifier | {
		type: string;
	}): RelationshipsSchema;
	doesTypeExist(type: string): boolean;
}
export declare class ModelSchemaProvider implements SchemaService {
	private store;
	private _schemas;
	private _typeMisses;
	constructor(store: ModelStore);
	resourceTypes(): Readonly<string[]>;
	hasTrait(type: string): boolean;
	resourceHasTrait(resource: StableRecordIdentifier | {
		type: string;
	}, trait: string): boolean;
	transformation(field: GenericField | ObjectField | ArrayField | {
		type: string;
	}): Transformation;
	derivation(field: DerivedField | {
		type: string;
	}): Derivation;
	hashFn(field: HashField | {
		type: string;
	}): HashFn;
	resource(resource: StableRecordIdentifier | {
		type: string;
	}): ResourceSchema | ObjectSchema;
	registerResources(schemas: Array<ResourceSchema | ObjectSchema>): void;
	registerResource(schema: ResourceSchema | ObjectSchema): void;
	registerTransformation(transform: Transformation): void;
	registerDerivation<
		R,
		T,
		FM extends ObjectValue | null
	>(derivation: Derivation<R, T, FM>): void;
	registerHashFn(hashFn: HashFn): void;
	private _loadModelSchema;
	fields(resource: RecordIdentifier | {
		type: string;
	}): Map<string, LegacyField>;
	hasResource(resource: {
		type: string;
	}): boolean;
}
export declare function buildSchema(store: Store): SchemaService;
export declare function getModelFactory(store: ModelStore, type: string): ModelFactory | null;
export {};
