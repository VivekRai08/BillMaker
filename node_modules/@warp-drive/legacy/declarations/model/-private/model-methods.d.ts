import type { Store } from "@warp-drive/core";
import type { ChangedAttributesHash } from "@warp-drive/core/types/cache";
import { RecordStore } from "@warp-drive/core/types/symbols";
import type { Snapshot } from "../../compat/-private.js";
import type { Errors } from "./errors.js";
import type RecordState from "./record-state.js";
import type BelongsToReference from "./references/belongs-to.js";
import type HasManyReference from "./references/has-many.js";
import type { MaybeBelongsToFields, MaybeHasManyFields } from "./type-utils.js";
export interface MinimalLegacyRecord {
	errors: Errors;
	___recordState: RecordState;
	currentState: RecordState;
	isDestroyed: boolean;
	isDestroying: boolean;
	isReloading: boolean;
	isValid: boolean;
	[RecordStore]: Store;
	deleteRecord(): void;
	unloadRecord(): void;
	save<T extends MinimalLegacyRecord>(this: T, options?: Record<string, unknown>): Promise<this>;
	destroyRecord<T extends MinimalLegacyRecord>(this: T, options?: Record<string, unknown>): Promise<this>;
}
export declare function rollbackAttributes<T extends MinimalLegacyRecord>(this: T): void;
export declare function unloadRecord<T extends MinimalLegacyRecord>(this: T): void;
export declare function belongsTo<
	T extends MinimalLegacyRecord,
	K extends MaybeBelongsToFields<T>
>(this: T, prop: K): BelongsToReference<T, K>;
export declare function hasMany<
	T extends MinimalLegacyRecord,
	K extends MaybeHasManyFields<T>
>(this: T, prop: K): HasManyReference<T, K>;
export declare function reload<T extends MinimalLegacyRecord>(this: T, options?: Record<string, unknown>): Promise<T>;
export declare function changedAttributes<T extends MinimalLegacyRecord>(this: T): ChangedAttributesHash;
export declare function serialize<T extends MinimalLegacyRecord>(this: T, options?: Record<string, unknown>): unknown;
export declare function deleteRecord<T extends MinimalLegacyRecord>(this: T): void;
export declare function save<T extends MinimalLegacyRecord>(this: T, options?: Record<string, unknown>): Promise<T>;
export declare function destroyRecord<T extends MinimalLegacyRecord>(this: T, options?: Record<string, unknown>): Promise<T>;
export declare function createSnapshot<T extends MinimalLegacyRecord>(this: T): Snapshot<T>;
