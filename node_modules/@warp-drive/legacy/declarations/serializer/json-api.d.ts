/**
* <blockquote style="margin: 1em; padding: .1em 1em .1em 1em; border-left: solid 1em #E34C32; background: #e0e0e0;">
<p>
⚠️ <strong>This is LEGACY documentation</strong> for a feature that is no longer encouraged to be used.
If starting a new app or thinking of implementing a new adapter, consider writing a
<a href="/ember-data/release/classes/%3CInterface%3E%20Handler">Handler</a> instead to be used with the <a href="https://github.com/emberjs/data/tree/main/packages/request#readme">RequestManager</a>
</p>
</blockquote>

In EmberData a Serializer is used to serialize and deserialize
records when they are transferred in and out of an external source.
This process involves normalizing property names, transforming
attribute values and serializing relationships.

`JSONAPISerializer` supports the http://jsonapi.org/ spec and is the
serializer recommended by Ember Data.

This serializer normalizes a JSON API payload that looks like:

```js [app/models/player.js]
import Model, { attr, belongsTo } from '@ember-data/model';

export default class Player extends Model {
@attr('string') name;
@attr('string') skill;
@attr('number') gamesPlayed;
@belongsTo('club') club;
}
```

```js [app/models/club.js]
import Model, { attr, hasMany } from '@ember-data/model';

export default class Club extends Model {
@attr('string') name;
@attr('string') location;
@hasMany('player') players;
}
```

```js
{
"data": [
{
"attributes": {
"name": "Benfica",
"location": "Portugal"
},
"id": "1",
"relationships": {
"players": {
"data": [
{
"id": "3",
"type": "players"
}
]
}
},
"type": "clubs"
}
],
"included": [
{
"attributes": {
"name": "Eusebio Silva Ferreira",
"skill": "Rocket shot",
"games-played": 431
},
"id": "3",
"relationships": {
"club": {
"data": {
"id": "1",
"type": "clubs"
}
}
},
"type": "players"
}
]
}
```

to the format that the Ember Data store expects.

### Customizing meta

Since a JSON API Document can have meta defined in multiple locations you can
use the specific serializer hooks if you need to customize the meta.

One scenario would be to camelCase the meta keys of your payload. The example
below shows how this could be done using `normalizeArrayResponse` and
`extractRelationship`.

```js [app/serializers/application.js]
import JSONAPISerializer from '@ember-data/serializer/json-api';

export default class ApplicationSerializer extends JSONAPISerializer {
normalizeArrayResponse(store, primaryModelClass, payload, id, requestType) {
let normalizedDocument = super.normalizeArrayResponse(...arguments);

// Customize document meta
normalizedDocument.meta = camelCaseKeys(normalizedDocument.meta);

return normalizedDocument;
}

extractRelationship(relationshipHash) {
let normalizedRelationship = super.extractRelationship(...arguments);

// Customize relationship meta
normalizedRelationship.meta = camelCaseKeys(normalizedRelationship.meta);

return normalizedRelationship;
}
}
```

@since 1.13.0
@class JSONAPISerializer
@public
*/
// eslint-disable-next-line @typescript-eslint/no-explicit-any
declare const JSONAPISerializer: any;
export { JSONAPISerializer };
