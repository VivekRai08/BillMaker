/**
* <blockquote style="margin: 1em; padding: .1em 1em .1em 1em; border-left: solid 1em #E34C32; background: #e0e0e0;">
<p>
⚠️ <strong>This is LEGACY documentation</strong> for a feature that is no longer encouraged to be used.
If starting a new app or thinking of implementing a new adapter, consider writing a
<a href="/ember-data/release/classes/%3CInterface%3E%20Handler">Handler</a> instead to be used with the <a href="https://github.com/emberjs/data/tree/main/packages/request#readme">RequestManager</a>
</p>
</blockquote>

In EmberData a Serializer is used to serialize and deserialize
records when they are transferred in and out of an external source.
This process involves normalizing property names, transforming
attribute values and serializing relationships.

By default, EmberData uses and recommends the `JSONAPISerializer`.

`JSONSerializer` is useful for simpler or legacy backends that may
not support the http://jsonapi.org/ spec.

For example, given the following `User` model and JSON payload:

```js [app/models/user.js]
import Model, { attr, belongsTo, hasMany } from '@ember-data/model';

export default class UserModel extends Model {
@hasMany('user') friends;
@belongsTo('location') house;

@attr('string') name;
}
```

```js
{
id: 1,
name: 'Sebastian',
friends: [3, 4],
links: {
house: '/houses/lefkada'
}
}
```

`JSONSerializer` will normalize the JSON payload to the JSON API format that the
Ember Data store expects.

You can customize how JSONSerializer processes its payload by passing options in
the `attrs` hash or by subclassing the `JSONSerializer` and overriding hooks:

- To customize how a single record is normalized, use the `normalize` hook.
- To customize how `JSONSerializer` normalizes the whole server response, use the
`normalizeResponse` hook.
- To customize how `JSONSerializer` normalizes a specific response from the server,
use one of the many specific `normalizeResponse` hooks.
- To customize how `JSONSerializer` normalizes your id, attributes or relationships,
use the `extractId`, `extractAttributes` and `extractRelationships` hooks.

The `JSONSerializer` normalization process follows these steps:

1. `normalizeResponse`
- entry method to the serializer.
2. `normalizeCreateRecordResponse`
- a `normalizeResponse` for a specific operation is called.
3. `normalizeSingleResponse`|`normalizeArrayResponse`
- for methods like `createRecord` we expect a single record back, while for methods like `findAll` we expect multiple records back.
4. `normalize`
- `normalizeArrayResponse` iterates and calls `normalize` for each of its records while `normalizeSingle`
calls it once. This is the method you most likely want to subclass.
5. `extractId` | `extractAttributes` | `extractRelationships`
- `normalize` delegates to these methods to
turn the record payload into the JSON API format.

@class JSONSerializer
@public
*/
// eslint-disable-next-line @typescript-eslint/no-explicit-any
declare const JSONSerializer: any;
export { JSONSerializer };
