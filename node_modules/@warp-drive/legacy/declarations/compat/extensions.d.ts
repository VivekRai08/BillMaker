import { type default as EmberObject } from "@ember/object";
import type { CAUTION_MEGA_DANGER_ZONE_Extension } from "@warp-drive/core/reactive/-private/schema";
declare const EmberObjectMethods: readonly ["addObserver", "cacheFor", "decrementProperty", "get", "getProperties", "incrementProperty", "notifyPropertyChange", "removeObserver", "set", "setProperties", "toggleProperty"];
export declare const EmberObjectArrayExtension: CAUTION_MEGA_DANGER_ZONE_Extension;
export declare const EmberObjectExtension: CAUTION_MEGA_DANGER_ZONE_Extension;
declare const EmberArrayLikeFeatures: {
	addObject<T>(this: T[], obj: T): T[];
	addObjects<T>(this: T[], objs: T[]): T[];
	popObject<T>(this: T[]): T | undefined;
	pushObject<T>(this: T[], obj: T): T;
	pushObjects<T>(this: T[], objs: T[]): T[];
	shiftObject<T>(this: T[]): NonNullable<T>;
	unshiftObject<T>(this: T[], obj: T): T;
	unshiftObjects<T>(this: T[], objs: T[]): T[];
	objectAt<T>(this: T[], index: number): T;
	objectsAt<T>(this: T[], indices: number[]): T[];
	removeAt<T>(this: T[], index: number): T[];
	insertAt<T>(this: T[], index: number, obj: T): T[];
	removeObject<T>(this: T[], obj: T): T[];
	removeObjects<T>(this: T[], objs: T[]): T[];
	toArray<T>(this: T[]): T[];
	replace<T>(this: T[], idx: number, amt: number, objects?: T[]): void;
	clear<T>(this: T[]): T[];
	setObjects<T>(this: T[], objects: T[]): T[];
	reverseObjects<T>(this: T[]): T[];
	compact<T>(this: T[]): (T & {})[];
	any<T>(this: T[], callback: Parameters<Array<T>["some"]>[0], target?: unknown): boolean;
	isAny<T>(this: T[], prop: string, value: unknown): boolean;
	isEvery<T>(this: T[], prop: string, value: unknown): boolean;
	getEach<T>(this: T[], key: string): unknown[];
	mapBy<T>(this: T[], key: string): unknown[];
	findBy<T>(this: T[], key: string, value?: unknown): T | undefined;
	filterBy<T>(this: T[], key: string, value?: unknown): T[];
	sortBy<T>(this: T[], ...sortKeys: string[]): T[];
	invoke<T>(this: T[], key: string, ...args: unknown[]): unknown[];
	addArrayObserver<T>(this: T[]): void;
	removeArrayObserver<T>(this: T[]): void;
	arrayContentWillChange<T>(this: T[]): void;
	arrayContentDidChange<T>(this: T[]): void;
	reject<T>(this: T[], callback: Parameters<Array<T>["filter"]>[0], target?: unknown): T[];
	rejectBy<T>(this: T[], key: string, value?: unknown): T[];
	setEach<T>(this: T[], key: string, value: unknown): void;
	uniq<T>(this: T[]): T[];
	uniqBy<T>(this: T[], key: string): T[];
	without<T>(this: T[], value: T): T[];
	firstObject: unknown;
	lastObject: unknown;
};
export declare const EmberArrayLikeExtension: CAUTION_MEGA_DANGER_ZONE_Extension;
export type ArrayType<T> = T extends ReadonlyArray<infer U> ? U : never;
export type WithEmberObject<T> = T & Pick<T & EmberObject, ArrayType<typeof EmberObjectMethods>>;
export type WithArrayLike<T> = T extends Array<infer U> ? U & Omit<typeof EmberArrayLikeFeatures, "firstObject" | "lastObject"> & {
	firstObject: T | undefined;
	lastObject: T | undefined;
} : T[] & Omit<typeof EmberArrayLikeFeatures, "firstObject" | "lastObject"> & {
	firstObject: T | undefined;
	lastObject: T | undefined;
};
export {};
