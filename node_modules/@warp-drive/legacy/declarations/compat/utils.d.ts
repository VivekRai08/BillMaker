type Reporter = (type: "formatted-id" | "formatted-type", actual: unknown, expected: unknown) => void;
/**
* Configure a function to be called when an id or type
* changes during normalization. This is useful for instrumenting
* to discover places where usage in the app is not consistent.
*
* @param method a function which takes a mismatch-type ('formatted-id' | 'formatted-type'), actual, and expected value
* @public
*/
export declare function configureMismatchReporter(fn: Reporter): void;
/**
* Configure a function to be called when an id or type
* fails validation. This is useful for instrumenting
* to discover places where usage in the app is not consistent.
*
* @param method a function which takes a message and a condition
* @public
*/
export declare function configureAssertFn(fn: (message: string, condition: unknown) => void): void;
/**
* Configure a function to be called to normalize
* a resource type string. Used by both formattedType
* and isEquivType to ensure consistent normalization
* during comparison.
*
* If validation fails or the type turns out be unnormalized
* the configured mismatch reporter and assert functions will
* be called.
*
* @param method a function which takes a string and returns a string
* @public
*/
export declare function configureTypeNormalization(fn: (type: string) => string): void;
/**
* Converts a potentially unnormalized type into the format expected
* by our EmberData Cache. Currently this is singular-dasherized.
*
* you should not rely on this function to give you an exact format
* for display purposes. Formatting for display should be handled
* differently if the exact format matters.
*
* Asserts invalid types (undefined, null, '') in dev.
*
* **Usage**
*
* ```js
* import formattedType from 'soxhub-client/helpers/formatted-type';
*
* formattedType('post'); // => 'post'
* formattedType('posts'); // => 'post'
* formattedType('Posts'); // => 'post'
* formattedType('post-comment'); // => 'post-comment'
* formattedType('post-comments'); // => 'post-comment'
* formattedType('post_comment'); // => 'post-comment'
* formattedType('postComment'); // => 'post-comment'
* formattedType('PostComment'); // => 'post-comment'
* ```
*
* @param {String} type the potentially un-normalized type
* @return {String} the normalized type
* @public
*/
export declare function formattedType<T extends string>(type: T | string): T;
/**
* Format an id to the format expected by the EmberData Cache.
* Currently this means that id should be `string | null`.
*
* Asserts invalid IDs (undefined, '', 0, '0') in dev.
*
* **Usage**
*
* ```js
* import formattedId from 'client/utils/formatted-id';
*
* formattedId('1'); // => '1'
* formattedId(1); // => '1'
* formattedId(null); // => null
*	```
*
* @param {String | Number | null} id the potentially un-normalized id
* @return {String | null} the normalized id
* @public
*/
export declare function formattedId(id: string | number): string;
export declare function formattedId(id: null): null;
export declare function formattedId(id: string | number | null): string | null;
export declare function expectId(id: string | number): string;
export declare function expectId(id: null): never;
/**
* Compares two types for strict equality, converting them to
* the format expected by the EmberData Cache to ensure
* differences in format are accounted for in the comparison.
*
* Asserts when expected or actual are invalid types in dev.
* Expected may never be null.
*
* ```js
* isEquivType('posts', 'post'); // true
* isEquivType('post', 'post'); // true
* isEquivType('posts', 'posts'); // true
* isEquivType('post-comment', 'postComment'); // true
* isEquivType('post-comment', 'PostComment'); // true
* isEquivType('post-comment', 'post_comment'); // true
* isEquivType('post-comment', 'post-comment'); // true
* isEquivType('post-comment', 'post'); // false
* isEquivType('posts', null); // false
* ```
*
* @param {String} expected a potentially unnormalized type to match against
* @param {String} actual a potentially unnormalized type to match against
* @return {Boolean} true if the types are equivalent
* @public
*/
export declare function isEquivType(expected: string, actual: string): boolean;
/**
* Compares two IDs for strict equality, converting them to
* the format expected by the EmberData Cache to ensure
* differences in format are accounted for in the comparison.
*
* Asserts when expected or actual are invalid IDs in dev.
* Expected may never be null.
*
* ```js
* isEquivId('1', 1); // true
* isEquivId('2', '2'); // true
* isEquivId(3, '3'); // true
* isEquivId(4, '3'); // false
* isEquivId(1, null); // false
* ```
*
* @param {string | number} expected a potentially un-normalized id to match against
* @param {string | number} actual a potentially un-normalized id to match against
* @return {Boolean} true if the ids are equivalent
* @public
*/
export declare function isEquivId(expected: string | number, actual: string | number | null): boolean;
export {};
