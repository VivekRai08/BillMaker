import type { Store, StoreRequestInput } from "../../../index.js";
import type { Future } from "../../../request.js";
import { RelatedCollection as ManyArray } from "../../../store/-private.js";
import type { Cache } from "../../../types/cache.js";
import type { StableRecordIdentifier } from "../../../types/identifier.js";
import type { ArrayField, DerivedField, FieldSchema, GenericField, LegacyHasManyField, LocalField, ObjectField, SchemaArrayField, SchemaObjectField } from "../../../types/schema/fields.js";
import type { Links } from "../../../types/spec/json-api-raw.js";
import { RecordStore } from "../../../types/symbols.js";
import { ReactiveResource } from "../record.js";
import type { SchemaService } from "../schema.js";
import { Parent } from "../symbols.js";
import { ManagedArray } from "./managed-array.js";
import { ManagedObject } from "./managed-object.js";
export declare const ManagedArrayMap: Map<ReactiveResource, Map<string, ManagedArray | ManyArray>>;
export declare const ManagedObjectMap: Map<ReactiveResource, Map<string, ManagedObject | ReactiveResource>>;
export declare function computeLocal(record: typeof Proxy<ReactiveResource>, field: LocalField, prop: string): unknown;
export declare function peekManagedArray(record: ReactiveResource, field: FieldSchema): ManyArray | ManagedArray | undefined;
export declare function peekManagedObject(record: ReactiveResource, field: ObjectField): ManagedObject | undefined;
export declare function peekManagedObject(record: ReactiveResource, field: SchemaObjectField): ReactiveResource | undefined;
export declare function computeField(schema: SchemaService, cache: Cache, record: ReactiveResource, identifier: StableRecordIdentifier, field: GenericField, prop: string | string[], editable: boolean): unknown;
export declare function computeArray(store: Store, schema: SchemaService, cache: Cache, record: ReactiveResource, identifier: StableRecordIdentifier, field: ArrayField | SchemaArrayField, path: string[], editable: boolean, legacy: boolean): ManagedArray | null;
export declare function computeObject(schema: SchemaService, cache: Cache, record: ReactiveResource, identifier: StableRecordIdentifier, field: ObjectField, path: string[], editable: boolean, legacy: boolean): ManagedObject | null;
export declare function computeSchemaObject(store: Store, cache: Cache, record: ReactiveResource, identifier: StableRecordIdentifier, field: SchemaObjectField, path: string[], legacy: boolean, editable: boolean): ReactiveResource | null;
export declare function computeAttribute(cache: Cache, identifier: StableRecordIdentifier, prop: string, editable: boolean): unknown;
export declare function computeDerivation(schema: SchemaService, record: ReactiveResource, identifier: StableRecordIdentifier, field: DerivedField, prop: string): unknown;
interface ResourceRelationship<T extends ReactiveResource = ReactiveResource> {
	lid: string;
	[Parent]: ReactiveResource;
	[RecordStore]: Store;
	name: string;
	data: T | null;
	links: Links;
	meta: Record<string, unknown>;
}
// TODO probably this should just be a Document
// but its separate until we work out the lid situation
declare class ResourceRelationship<T extends ReactiveResource = ReactiveResource> {
	constructor(store: Store, cache: Cache, parent: ReactiveResource, identifier: StableRecordIdentifier, field: FieldSchema, name: string, editable: boolean);
	fetch(options?: StoreRequestInput<T, T>): Future<T>;
}
export declare function computeResource<T extends ReactiveResource>(store: Store, cache: Cache, parent: ReactiveResource, identifier: StableRecordIdentifier, field: FieldSchema, prop: string, editable: boolean): ResourceRelationship<T>;
export declare function computeHasMany(store: Store, schema: SchemaService, cache: Cache, record: ReactiveResource, identifier: StableRecordIdentifier, field: LegacyHasManyField, path: string[], editable: boolean, legacy: boolean): ManyArray | null;
export {};
