import type { BaseFinderOptions } from "../../../types.js";
import type { LocalRelationshipOperation } from "../../../types/graph.js";
import type { StableDocumentIdentifier, StableRecordIdentifier } from "../../../types/identifier.js";
import type { TypeFromInstanceOrString } from "../../../types/record.js";
import type { ImmutableRequestInfo } from "../../../types/request.js";
import type { LegacyHasManyField, LinksModeHasManyField } from "../../../types/schema/fields.js";
import type { Links, PaginationLinks } from "../../../types/spec/json-api-raw.js";
import type { RecordArrayManager } from "../managers/record-array-manager.js";
import type { WarpDriveSignal } from "../new-core-tmp/reactivity/internal.js";
import { ARRAY_SIGNAL } from "../new-core-tmp/reactivity/internal.js";
import type { Store } from "../store-service.js";
import { NativeProxy } from "./native-proxy-type-fix.js";
export declare const SOURCE: "___(unique) Symbol(#source)";
export declare const MUTATE: "___(unique) Symbol(#update)";
declare const IS_COLLECTION: "___(unique) Symbol(IS_COLLECTION)";
export type IdentifierArrayCreateOptions<T = unknown> = {
	identifiers: StableRecordIdentifier<TypeFromInstanceOrString<T>>[];
	type?: TypeFromInstanceOrString<T>;
	store: Store;
	allowMutation: boolean;
	manager: MinimumManager;
	field?: LegacyHasManyField | LinksModeHasManyField;
	links?: Links | PaginationLinks | null;
	meta?: Record<string, unknown> | null;
	identifier?: StableDocumentIdentifier | null;
	[MUTATE]?(target: StableRecordIdentifier[], receiver: typeof NativeProxy<StableRecordIdentifier[], T[]>, prop: string, args: unknown[], _SIGNAL: WarpDriveSignal): unknown;
};
type PromiseTo<T> = Omit<Promise<T>, typeof Symbol.toStringTag>;
type PromiseManyArray<T> = {
	length: number;
	content: IdentifierArray<T> | null;
	promise: Promise<IdentifierArray<T>> | null;
} & PromiseTo<IdentifierArray<T>>;
export type MinimumManager = {
	_syncArray: (array: IdentifierArray) => void;
	mutate?(mutation: LocalRelationshipOperation): void;
	reloadHasMany?<T>(key: string, options?: BaseFinderOptions): Promise<IdentifierArray<T>> | PromiseManyArray<T>;
};
/**
A record array is an array that contains records of a certain type (or modelName).
The record array materializes records as needed when they are retrieved for the first
time. You should not create record arrays yourself. Instead, an instance of
`RecordArray` or its subclasses will be returned by your application's store
in response to queries.

This class should not be imported and instantiated by consuming applications.

@class RecordArray
@public
*/
export interface IdentifierArray<T = unknown> extends Omit<Array<T>, "[]"> {
	[IS_COLLECTION]: boolean;
	[ARRAY_SIGNAL]: WarpDriveSignal;
	[SOURCE]: StableRecordIdentifier[];
}
export declare class IdentifierArray<T = unknown> {
	DEPRECATED_CLASS_NAME: string;
	/**
	The flag to signal a `RecordArray` is currently loading data.
	Example
	```javascript
	let people = store.peekAll('person');
	people.isUpdating; // false
	people.update();
	people.isUpdating; // true
	```
	@property isUpdating
	@public
	@type Boolean
	*/
	isUpdating: boolean;
	isLoaded: boolean;
	isDestroying: boolean;
	isDestroyed: boolean;
	_updatingPromise: Promise<IdentifierArray<T>> | null;
	readonly identifier: StableDocumentIdentifier | null;
	links: Links | PaginationLinks | null;
	meta: Record<string, unknown> | null;
	modelName?: TypeFromInstanceOrString<T>;
	/**
	The store that created this record array.
	
	@property store
	@private
	@type Store
	*/
	store: Store;
	_manager: MinimumManager;
	destroy(clear: boolean): void;
	constructor(options: IdentifierArrayCreateOptions<T>);
	/**
	Used to get the latest version of all of the records in this array
	from the adapter.
	
	Example
	
	```javascript
	let people = store.peekAll('person');
	people.isUpdating; // false
	
	people.update().then(function() {
	people.isUpdating; // false
	});
	
	people.isUpdating; // true
	```
	
	@public
	*/
	update(): Promise<IdentifierArray<T>>;
	/*
	Update this Array and return a promise which resolves once the update
	is finished.
	*/
	_update(): Promise<IdentifierArray<T>>;
	// TODO deprecate
	/**
	Saves all of the records in the `RecordArray`.
	
	Example
	
	```javascript
	let messages = store.peekAll('message');
	messages.forEach(function(message) {
	message.hasBeenSeen = true;
	});
	messages.save();
	```
	
	@public
	@return {Promise<IdentifierArray>} promise
	*/
	save(): Promise<IdentifierArray>;
}
export type CollectionCreateOptions = IdentifierArrayCreateOptions & {
	manager: RecordArrayManager;
	query: ImmutableRequestInfo | Record<string, unknown> | null;
	isLoaded: boolean;
};
export declare class Collection<T = unknown> extends IdentifierArray<T> {
	query: ImmutableRequestInfo | Record<string, unknown> | null;
	_manager: RecordArrayManager;
	constructor(options: CollectionCreateOptions);
	_update(): Promise<Collection<T>>;
	destroy(clear: boolean): void;
}
export {};
