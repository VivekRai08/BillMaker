import type { CacheHandler as CacheHandlerType } from "../../../request.js";
import type { ImmutableRequestInfo, RequestContext } from "../../../types/request.js";
import type { ResourceIdentifierObject } from "../../../types/spec/json-api-raw.js";
import type { RequestSignature } from "../../../types/symbols.js";
import type { Store } from "../store-service.js";
export type LooseStoreRequestInfo<
	RT = unknown,
	T = unknown
> = Omit<ImmutableRequestInfo<RT, T>, "records" | "headers" | typeof RequestSignature> & {
	records?: ResourceIdentifierObject[];
	headers?: Headers;
};
export type StoreRequestInput<
	RT = unknown,
	T = unknown
> = ImmutableRequestInfo<RT, T> | LooseStoreRequestInfo<RT, T>;
export interface StoreRequestContext extends RequestContext {
	request: ImmutableRequestInfo & {
		store: Store;
	};
}
/**
* A CacheHandler that adds support for using an WarpDrive Cache with a RequestManager.
*
* This handler will only run when a request has supplied a `store` instance. Requests
* issued by the store via `store.request()` will automatically have the `store` instance
* attached to the request.
*
* ```ts
* requestManager.request({
*   store: store,
*   url: '/api/posts',
*   method: 'GET'
* });
* ```
*
* When this handler elects to handle a request, it will return the raw `StructuredDocument`
* unless the request has `[EnableHydration]` set to `true`. In this case, the handler will
* return a `Document` instance that will automatically update the UI when the cache is updated
* in the future and will hydrate any identifiers in the StructuredDocument into Record instances.
*
* When issuing a request via the store, [EnableHydration] is automatically set to `true`. This
* means that if desired you can issue requests that utilize the cache without needing to also
* utilize Record instances if desired.
*
* Said differently, you could elect to issue all requests via a RequestManager, without ever using
* the store directly, by setting [EnableHydration] to `true` and providing a store instance. Not
* necessarily the most useful thing, but the decoupled nature of the RequestManager and incremental-feature
* approach of WarpDrive allows for this flexibility.
*
* ```ts
* import { EnableHydration } from '@warp-drive/core/types/request';
*
* requestManager.request({
*   store: store,
*   url: '/api/posts',
*   method: 'GET',
*   [EnableHydration]: true
* });
*
*/
export declare const CacheHandler: CacheHandlerType;
