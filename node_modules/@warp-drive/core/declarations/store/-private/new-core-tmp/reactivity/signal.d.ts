import type { SignalStore, WarpDriveSignal } from "./internal.js";
/**
* Creates a signal for the key/object pairing and subscribes to the signal.
*
* Use when you need to ensure a signal exists and is subscribed to.
*
* @internal
*/
export declare function entangleSignal<T extends object>(signals: SignalStore, obj: T, key: string | symbol, initialValue: unknown): WarpDriveSignal;
/**
* define an enumerable signal property.
*
* Akin to Object.defineProperty.
*
* The signal will be lazily created when accessed and scoped to the
* instance of the object.
*
* @internal
*/
export declare function defineSignal<T extends object>(obj: T, key: string, v?: unknown): void;
/**
* Define a non-enumerable signal property.
*
* @internal
*/
export declare function defineNonEnumerableSignal<T extends object>(obj: T, key: string, v?: unknown): void;
export declare function memoized<
	T extends object,
	K extends keyof T & string
>(target: T, key: K, descriptor: PropertyDescriptor): PropertyDescriptor;
export declare function gate<
	T extends object,
	K extends keyof T & string
>(_target: T, key: K, desc: PropertyDescriptor): PropertyDescriptor;
export declare function defineGate<T extends object>(obj: T, key: string, desc: PropertyDescriptor): void;
