import type { StableDocumentIdentifier, StableRecordIdentifier } from "../../../types/identifier.js";
import type { CacheCapabilitiesManager as StoreWrapper } from "../../-types/q/cache-capabilities-manager.js";
import type { SchemaService } from "../../-types/q/schema-service.js";
import type { IdentifierCache } from "../caches/identifier-cache.js";
import type { Store } from "../store-service.js";
import type { NotificationType } from "./notification-manager.js";
export interface CacheCapabilitiesManager {
	getSchemaDefinitionService(): SchemaService;
}
export declare class CacheCapabilitiesManager implements StoreWrapper {
	_willNotify: boolean;
	_pendingNotifies: Map<StableRecordIdentifier, Set<string>>;
	_store: Store;
	constructor(_store: Store);
	get identifierCache(): IdentifierCache;
	_scheduleNotification(identifier: StableRecordIdentifier, key: string): void;
	_flushNotifications(): void;
	notifyChange(identifier: StableRecordIdentifier, namespace: "added" | "removed", key: null): void;
	notifyChange(identifier: StableDocumentIdentifier, namespace: "added" | "updated" | "removed", key: null): void;
	notifyChange(identifier: StableRecordIdentifier, namespace: NotificationType, key: string | null): void;
	get schema(): SchemaService;
	setRecordId(identifier: StableRecordIdentifier, id: string): void;
	hasRecord(identifier: StableRecordIdentifier): boolean;
	disconnectRecord(identifier: StableRecordIdentifier): void;
}
