import type { TypedRecordInstance, TypeFromInstance } from "../../../types/record.js";
import type { LegacyAttributeField, LegacyRelationshipField } from "../../../types/schema/fields.js";
import type { KeyOrString, ModelSchema } from "../../-types/q/ds-model.js";
import type { Store } from "../store-service.js";
export declare function getShimClass<T>(store: Store, modelName: T extends TypedRecordInstance ? TypeFromInstance<T> : string): ShimModelClass<T>;
// Mimics the static apis of @ember-data/model
export default class ShimModelClass<T = unknown> implements ModelSchema<T> {
	private __store;
	modelName: T extends TypedRecordInstance ? TypeFromInstance<T> : string;
	constructor(store: Store, modelName: T extends TypedRecordInstance ? TypeFromInstance<T> : string);
	get fields(): Map<KeyOrString<T>, "attribute" | "belongsTo" | "hasMany">;
	get attributes(): Map<KeyOrString<T>, LegacyAttributeField>;
	get relationshipsByName(): Map<KeyOrString<T>, LegacyRelationshipField>;
	eachAttribute<K extends KeyOrString<T>>(callback: (key: K, attribute: LegacyAttributeField) => void, binding?: T): void;
	eachRelationship<K extends KeyOrString<T>>(callback: (key: K, relationship: LegacyRelationshipField) => void, binding?: T): void;
	eachTransformedAttribute<K extends KeyOrString<T>>(callback: (key: K, type: string | null) => void, binding?: T): void;
}
