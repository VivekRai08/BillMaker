type UniversalTransientKey = "REQ_ID";
type UniversalKey = `(transient) ${UniversalTransientKey}` | "RequestMap" | "PromiseCache" | "RequestCache" | "SkipCache" | "EnableHydration" | "WarpDriveRuntimeConfig";
type TransientKey = "transactionRef" | "configuredGenerationMethod" | "configuredUpdateMethod" | "configuredForgetMethod" | "configuredResetMethod" | "configuredKeyInfoMethod" | "signalHooks";
type GlobalKey = `(transient) ${TransientKey}` | "AdapterError" | "InvalidError" | "TimeoutError" | "AbortError" | "UnauthorizedError" | "ForbiddenError" | "NotFoundError" | "ConflictError" | "ServerError" | "#{}" | "#[]" | "Signals" | "AvailableShims" | "FAKE_ARR" | "#source" | "#update" | "#notify" | "IS_COLLECTION" | "Touching" | "RequestPromise" | "SaveOp" | "LEGACY_SUPPORT" | "LegacySupport" | "Graphs" | "IS_FROZEN" | "IS_CACHE_HANDLER" | "CONFIG" | "DEBUG_MAP" | "IDENTIFIERS" | "DOCUMENTS" | "CacheForIdentifierCache" | "RecordCache" | "StoreMap" | "Store" | "$type" | "TransformName" | "RequestSignature" | "IS_FUTURE" | "DOC" | "ManagedArrayMap" | "ManagedObjectMap" | "Support" | "SOURCE" | "MUTATE" | "Destroy" | "Identifier" | "Editable" | "EmbeddedPath" | "EmbeddedField" | "Parent" | "Checkout" | "Legacy";
type UniqueSymbol<T extends string> = `___(unique) Symbol(${T})`;
type UniqueSymbolOr<
	T,
	K extends string
> = T extends symbol ? UniqueSymbol<K> : T;
export declare function getOrSetGlobal<
	T,
	K extends GlobalKey
>(key: K, value: T): UniqueSymbolOr<T, K>;
export declare function peekTransient<T>(key: TransientKey): T | null;
export declare function setTransient<T>(key: TransientKey, value: T): T;
export declare function getOrSetUniversal<
	T,
	K extends UniversalKey
>(key: K, value: T): UniqueSymbolOr<T, K>;
export declare function peekUniversalTransient<T>(key: UniversalTransientKey): T | null;
export declare function setUniversalTransient<T>(key: UniversalTransientKey, value: T): T;
export {};
