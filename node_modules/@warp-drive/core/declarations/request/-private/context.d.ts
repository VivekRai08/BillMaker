import type { StableDocumentIdentifier } from "../../types/identifier.js";
import type { ImmutableHeaders, ImmutableRequestInfo, RequestInfo, ResponseInfo } from "../../types/request.js";
import type { DeferredStream, GodContext } from "./types.js";
export declare function upgradeHeaders(headers: Headers | ImmutableHeaders): ImmutableHeaders;
export declare function cloneResponseProperties(response: Response): ResponseInfo;
export declare class ContextOwner {
	hasSetStream: boolean;
	hasSetResponse: boolean;
	hasSubscribers: boolean;
	stream: DeferredStream;
	response: ResponseInfo | null;
	request: ImmutableRequestInfo;
	enhancedRequest: ImmutableRequestInfo;
	nextCalled: number;
	god: GodContext;
	controller: AbortController;
	requestId: number;
	isRoot: boolean;
	constructor(request: RequestInfo, god: GodContext, isRoot?: boolean);
	get hasRequestedStream(): boolean;
	getResponse(): ResponseInfo | null;
	getStream(): Promise<ReadableStream | null>;
	abort(reason: DOMException): void;
	setStream(stream: ReadableStream | Promise<ReadableStream | null> | null): void;
	resolveStream(): void;
	setResponse(response: ResponseInfo | Response | null): void;
}
export declare class Context {
	#private;
	request: ImmutableRequestInfo;
	id: number;
	private _isCacheHandler;
	private _finalized;
	constructor(owner: ContextOwner, isCacheHandler: boolean);
	setStream(stream: ReadableStream | Promise<ReadableStream | null>): void;
	setResponse(response: ResponseInfo | Response | null): void;
	setIdentifier(identifier: StableDocumentIdentifier): void;
	get hasRequestedStream(): boolean;
	_finalize(): void;
}
export type HandlerRequestContext = Context;
