export type CacheResult<
	T = unknown,
	E = unknown
> = {
	isError: true;
	result: E;
} | {
	isError: false;
	result: T;
};
export type Awaitable<
	T = unknown,
	E = unknown
> = {
	then: (onFulfilled: (value: T) => unknown, onRejected: (reason: E) => unknown) => unknown;
	catch: (onRejected: (reason: E) => unknown) => unknown;
	finally: (onFinally: () => unknown) => unknown;
};
export declare const PromiseCache: WeakMap<Awaitable, CacheResult>;
export declare const RequestMap: Map<number, CacheResult>;
export declare function setRequestResult(requestId: number, result: CacheResult): void;
export declare function clearRequestResult(requestId: number): void;
export declare function getRequestResult(requestId: number): CacheResult | undefined;
export declare function setPromiseResult(promise: Promise<unknown> | Awaitable, result: CacheResult): void;
export declare function getPromiseResult<
	T,
	E
>(promise: Promise<T> | Awaitable<T, E>): CacheResult<T, E> | undefined;
