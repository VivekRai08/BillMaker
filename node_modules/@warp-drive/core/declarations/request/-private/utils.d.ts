import type { RequestInfo, StructuredDataDocument } from "../../types/request.js";
import { ContextOwner } from "./context.js";
import type { DeferredFuture, Future, GodContext, Handler } from "./types.js";
export declare const IS_CACHE_HANDLER: "___(unique) Symbol(IS_CACHE_HANDLER)";
export declare function curryFuture<T>(owner: ContextOwner, inbound: Future<T>, outbound: DeferredFuture<T>): Future<T>;
export interface HttpErrorProps extends DOMException {
	code: number;
	name: string;
	status: number;
	statusText: string;
	isRequestError: boolean;
}
export declare function enhanceReason(reason?: string): DOMException;
export declare function handleOutcome<T>(owner: ContextOwner, inbound: Promise<T | StructuredDataDocument<T>>, outbound: DeferredFuture<T>): Future<T>;
export declare function executeNextHandler<T>(wares: Readonly<Handler[]>, request: RequestInfo, i: number, god: GodContext): Future<T>;
