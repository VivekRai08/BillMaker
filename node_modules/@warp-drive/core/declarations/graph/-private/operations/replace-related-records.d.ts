import type { StableRecordIdentifier } from "../../../types.js";
import type { ReplaceRelatedRecordsOperation } from "../../../types/graph.js";
import type { Graph } from "../graph.js";
/*
case many:1
========
In a bi-directional graph with Many:1 edges, adding a value
results in up-to 3 discrete value transitions, while removing
a value is only 2 transitions.

For adding C to A
If: A <<-> B, C <->> D is the initial state,
and: B <->> A <<-> C, D is the final state

then we would undergo the following transitions.

add C to A
remove C from D
add A to C

For removing B from A
If: A <<-> B, C <->> D is the initial state,
and: A, B, C <->> D is the final state

then we would undergo the following transitions.

remove B from A
remove A from B

case many:many
===========
In a bi-directional graph with Many:Many edges, adding or
removing a value requires only 2 value transitions.

For Adding
If: A<<->>B, C<<->>D is the initial state (double arrows representing the many side)
And: D<<->>C<<->>A<<->>B is the final state

Then we would undergo two transitions.

add C to A.
add A to C

For Removing
If: A<<->>B, C<<->>D is the initial state (double arrows representing the many side)
And: A, B, C<<->>D is the final state

Then we would undergo two transitions.

remove B from A
remove A from B

case many:?
========
In a uni-directional graph with Many:? edges (modeled in WarpDrive with `inverse:null`) with
artificial (implicit) inverses, replacing a value results in 2 discrete value transitions.
This is because a Many:? relationship is effectively Many:Many.
*/
export default function replaceRelatedRecords(graph: Graph, op: ReplaceRelatedRecordsOperation, isRemote: boolean): void;
export declare function addToInverse(graph: Graph, identifier: StableRecordIdentifier, key: string, value: StableRecordIdentifier, isRemote: boolean): void;
export declare function notifyInverseOfPotentialMaterialization(graph: Graph, identifier: StableRecordIdentifier, key: string, value: StableRecordIdentifier, isRemote: boolean): void;
export declare function removeFromInverse(graph: Graph, identifier: StableRecordIdentifier, key: string, value: StableRecordIdentifier, isRemote: boolean): void;
