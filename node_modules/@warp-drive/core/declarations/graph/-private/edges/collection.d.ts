import type { CollectionRelationship } from "../../../types/cache/relationship.js";
import type { StableRecordIdentifier } from "../../../types/identifier.js";
import type { Links, Meta, PaginationLinks } from "../../../types/spec/json-api-raw.js";
import type { UpgradedMeta } from "../-edge-definition.js";
import type { RelationshipState } from "../-state.js";
export interface CollectionEdge {
	definition: UpgradedMeta;
	identifier: StableRecordIdentifier;
	state: RelationshipState;
	remoteMembers: Set<StableRecordIdentifier>;
	remoteState: StableRecordIdentifier[];
	additions: Set<StableRecordIdentifier> | null;
	removals: Set<StableRecordIdentifier> | null;
	meta: Meta | null;
	links: Links | PaginationLinks | null;
	localState: StableRecordIdentifier[] | null;
	/**
	* Whether the localState for this edge is out-of-sync
	* with the remoteState.
	*
	* if state.hasReceivedData=false we are also
	* not dirty since there is nothing to sync with.
	*
	*/
	isDirty: boolean;
	transactionRef: number;
	/**
	* Whether data for this edge has been accessed at least once
	* via `graph.getData`
	*
	*/
	accessed: boolean;
	_diff?: {
		add: Set<StableRecordIdentifier>;
		del: Set<StableRecordIdentifier>;
	};
}
export declare function createCollectionEdge(definition: UpgradedMeta, identifier: StableRecordIdentifier): CollectionEdge;
export declare function legacyGetCollectionRelationshipData(source: CollectionEdge, getRemoteState: boolean): CollectionRelationship;
