import type { Store } from "../../store/-private.js";
import type { CacheCapabilitiesManager } from "../../types.js";
import type { UpdateResourceRelationshipOperation } from "../../types/cache/operations.js";
import type { UpdateRelationshipOperation } from "../../types/graph.js";
import type { StableRecordIdentifier } from "../../types/identifier.js";
import type { ResourceIdentifierObject } from "../../types/spec/json-api-raw.js";
import type { UpgradedMeta } from "./-edge-definition.js";
import type { CollectionEdge } from "./edges/collection.js";
import type { ImplicitEdge } from "./edges/implicit.js";
import type { ResourceEdge } from "./edges/resource.js";
import type { Graph, GraphEdge } from "./graph.js";
export declare function getStore(wrapper: CacheCapabilitiesManager | {
	_store: Store;
}): Store;
export declare function expandingGet<T>(cache: Record<string, Record<string, T>>, key1: string, key2: string): T | undefined;
export declare function expandingSet<T>(cache: Record<string, Record<string, T>>, key1: string, key2: string, value: T): void;
export declare function assertValidRelationshipPayload(graph: Graph, op: UpdateRelationshipOperation | UpdateResourceRelationshipOperation): void;
export declare function isNew(identifier: StableRecordIdentifier): boolean;
export declare function isBelongsTo(relationship: GraphEdge): relationship is ResourceEdge;
export declare function isImplicit(relationship: GraphEdge): relationship is ImplicitEdge;
export declare function isHasMany(relationship: GraphEdge): relationship is CollectionEdge;
export declare function forAllRelatedIdentifiers(rel: GraphEdge, cb: (identifier: StableRecordIdentifier) => void): void;
/*
Removes the given identifier from BOTH remote AND local state.

This method is useful when either a deletion or a rollback on a new record
needs to entirely purge itself from an inverse relationship.
*/
export declare function removeIdentifierCompletelyFromRelationship(graph: Graph, relationship: GraphEdge, value: StableRecordIdentifier, silenceNotifications?: boolean): void;
export declare function notifyChange(graph: Graph, relationship: CollectionEdge | ResourceEdge): void;
export declare function assertRelationshipData(store: Store, identifier: StableRecordIdentifier, data: ResourceIdentifierObject, meta: UpgradedMeta): void;
