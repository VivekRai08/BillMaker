import type { StableRecordIdentifier } from "../../types/identifier.js";
import type { CollectionEdge } from "./edges/collection.js";
import type { ResourceEdge } from "./edges/resource.js";
import type { Graph } from "./graph.js";
type Diff<T> = {
	add: Set<T>;
	del: Set<T>;
	finalState: T[];
	finalSet: Set<T>;
	changed: boolean;
	remoteOrderChanged: boolean;
};
export declare function diffCollection(finalState: StableRecordIdentifier[], relationship: CollectionEdge, onAdd: (v: StableRecordIdentifier) => void, onDel: (v: StableRecordIdentifier) => void): Diff<StableRecordIdentifier>;
export declare function computeLocalState(storage: CollectionEdge): StableRecordIdentifier[];
/**
* A function which attempts to add a value to the local state of a collection
* relationship, and returns true if the value was added, or false if it was
* already present.
*
* It will not generate a notification, will not update the relationships to dirty,
* and will not update the inverse relationships, making it suitable for use as
* an internal util to perform the just the addition to a specific side of a
* relationship.
*
* @internal
*/
export declare function _add(graph: Graph, record: StableRecordIdentifier, relationship: CollectionEdge, value: StableRecordIdentifier, index: number | null, isRemote: boolean): boolean;
export declare function _remove(graph: Graph, record: StableRecordIdentifier, relationship: CollectionEdge, value: StableRecordIdentifier, index: number | null, isRemote: boolean): boolean;
export declare function _removeLocal(relationship: CollectionEdge, value: StableRecordIdentifier): boolean;
export declare function _removeRemote(relationship: CollectionEdge, value: StableRecordIdentifier): boolean;
export declare function rollbackRelationship(graph: Graph, identifier: StableRecordIdentifier, field: string, relationship: CollectionEdge | ResourceEdge): void;
export {};
