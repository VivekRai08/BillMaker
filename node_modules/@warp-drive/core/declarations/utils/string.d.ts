/**
* An LRUCache implementation with upsert semantics.
*
* This implementation is *not* generic, but focuses on
* performance tuning for the string transformation cases
* where the key maps to the value very simply.
*
* It takes a work function that should generate a new value
* for a given key when called. It will be called when the key
* is not found in the cache.
*
* It keeps track of the number of hits, misses, and ejections
* in DEBUG envs, which is useful for tuning the cache size.
*
* This is an internal utility class for use by this module
* and by `@warp-drive/utilities/string`. It is not intended
* for use outside of these modules at this time.
*
* @internal
*/
export declare class LRUCache<
	T,
	V
> {
	size: number;
	state: Map<T, V>;
	doWork: (k: T) => V;
	// debug stats
	_hits: number;
	_misses: number;
	_ejected: number;
	constructor(doWork: (k: T) => V, size?: number);
	get(key: T): V;
	set(key: T, value: V): void;
	clear(): void;
}
export declare const STRING_DASHERIZE_CACHE: LRUCache<string, string>;
/**
* This is an internal utility function that converts a string
* to a dasherized format. Library consumers should use the
* re-exported version from `@warp-drive/utilities/string` instead.
*
* This version is only in this location to support a deprecated
* behavior in the core package and will be removed in a future.
*
* @internal
*/
export declare function dasherize(str: string): string;
