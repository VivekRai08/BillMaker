import { getOrSetGlobal, peekTransient, setTransient } from './types/-private.js';
import { macroCondition, getGlobalConfig } from '@embroider/macros';
const ARRAY_SIGNAL = getOrSetGlobal('#[]', Symbol('#[]'));
const OBJECT_SIGNAL = getOrSetGlobal('#{}', Symbol('#{}'));

/**
 * Requirements:
 *
 * Signal:
 *
 * - signal: a way of creating a reference that we can dirty when we desire to notify
 *         - @signal: a way of creating an accessor on an object that subscribes to a signal on access
 *                    and notifies the signal on set, or of upgrading a descriptor to be such an accessor
 *         - defineSignal: a way of creating a signal on an object
 *         - notifySignal: a way of notifying the underlying signal that it has been dirtied
 *         - peekSignal: a way of inspecting the signal without notifying it
 *
 *  - gate: a memoized getter function that re-runs when on access if its signal is dirty
 *          conceptually, a gate is a tightly coupled signal and memo
 *         - @gate: a way of creating a gate on an object or upgrading a descriptor with a getter
 *                  to be a gate
 *         - defineGate: a way of creating a gate on an object
 *         - notifySignal: a way of notifying the signal for a gate that it has been dirtied
 *
 * - memo:
 *        - @memo: a way of creating a memoized getter on an object or upgrading a descriptor with a getter
 *                 to be a memo
 *        - defineMemo: a way of creating a memo on an object
 *
 * - signalStore: storage bucket for signals associated to an object
 *        - withSignalStore: a way of pre-creating a signal store on an object
 *
 *
 * @internal
 */

/**
 * An Opaque type that represents a framework specific or TC39 signal.
 *
 * It may be an array of signals or a single signal.
 *
 * @internal
 */

/**
 * The hooks which MUST be configured in order to use reactive arrays,
 * resources and documents with framework specfic signals or TC39 signals.
 *
 * Support for multiple frameworks simultaneously can be done via
 * this abstraction by returning multiple signals from the `createSignal`
 * method, and consuming the correct one via the correct framework via
 * the `consumeSignal` and `notifySignal` methods.
 *
 * Unlike many signals implementations, WarpDrive does not wrap values as
 * signals directly, but instead uses signals to alert the reactive layer
 * to changes in the underlying cache. E.g. a signal is associated to a value,
 * but does not serve as the cache for that value directly. We refer to this as
 * a "gate", the pattern has also been called "side-signals".
 *
 * A no-op implementation is allowed, though it may lead to performance issues
 * in locations that use createMemo as no memoization would be done. This is
 * typically desirable only when integrating with a framework that does its own
 * memoization and does not integrate with any signals-like primitive. For these
 * scenarios you may also be interested in integrating with the {@link NotificationManager}
 * more directly.
 *
 * @public
 */

/**
 * Contains information a {@link SignalHooks} implementation may want
 * to use, such as the specialized key used for the signal
 * representing an array's contents / length.
 *
 * ```ts
 * interface HooksOptions {
 *   wellknown: {
 *     Array: symbol | string;
 *   }
 * }
 * ```
 *
 * @public
 */

/**
 * Configures the signals implementation to use. Supports multiple
 * implementations simultaneously.
 *
 * See {@link HooksOptions} for the options passed to the provided function
 * when called.
 *
 * See {@link SignalHooks} for the implementation the callback function should
 * return.
 *
 * @public
 * @param buildConfig - a function that takes options and returns a configuration object
 */
function setupSignals(buildConfig) {
  // We want to assert this but can't because too many package manager
  // and bundler bugs exist that cause this to be called multiple times
  // for what should be a single call.
  // assert(`Cannot override configured signal hooks`, peekTransient('signalHooks') === null);
  const hooks = buildConfig({
    wellknown: {
      Array: ARRAY_SIGNAL
    }
  });
  setTransient('signalHooks', hooks);
}

/**
 * Internal method for consuming the configured `createSignal` hook
 *
 * @internal
 */
function createSignal(obj, key) {
  const signalHooks = peekTransient('signalHooks');
  macroCondition(getGlobalConfig().WarpDrive.env.DEBUG) ? (test => {
    if (!test) {
      throw new Error(`Signal hooks not configured`);
    }
  })(signalHooks) : {};
  return signalHooks.createSignal(obj, key);
}

/**
 * Internal method for consuming the configured `consumeSignal` hook
 *
 * @internal
 */
function consumeSignal(signal) {
  const signalHooks = peekTransient('signalHooks');
  macroCondition(getGlobalConfig().WarpDrive.env.DEBUG) ? (test => {
    if (!test) {
      throw new Error(`Signal hooks not configured`);
    }
  })(signalHooks) : {};
  return signalHooks.consumeSignal(signal);
}

/**
 * Internal method for consuming the configured `notifySignal` hook
 *
 * @internal
 */
function notifySignal(signal) {
  const signalHooks = peekTransient('signalHooks');
  macroCondition(getGlobalConfig().WarpDrive.env.DEBUG) ? (test => {
    if (!test) {
      throw new Error(`Signal hooks not configured`);
    }
  })(signalHooks) : {};
  return signalHooks.notifySignal(signal);
}
function createMemo(object, key, fn) {
  const signalHooks = peekTransient('signalHooks');
  macroCondition(getGlobalConfig().WarpDrive.env.DEBUG) ? (test => {
    if (!test) {
      throw new Error(`Signal hooks not configured`);
    }
  })(signalHooks) : {};
  return signalHooks.createMemo(object, key, fn);
}
function willSyncFlushWatchers() {
  const signalHooks = peekTransient('signalHooks');
  macroCondition(getGlobalConfig().WarpDrive.env.DEBUG) ? (test => {
    if (!test) {
      throw new Error(`Signal hooks not configured`);
    }
  })(signalHooks) : {};
  return signalHooks.willSyncFlushWatchers();
}
function waitFor(promise) {
  const signalHooks = peekTransient('signalHooks');
  if (signalHooks?.waitFor) {
    return signalHooks.waitFor(promise);
  }
  return promise;
}
export { ARRAY_SIGNAL as A, OBJECT_SIGNAL as O, createSignal as a, consumeSignal as b, createMemo as c, willSyncFlushWatchers as d, notifySignal as n, setupSignals as s, waitFor as w };