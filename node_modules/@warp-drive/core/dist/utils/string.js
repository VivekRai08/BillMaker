import { macroCondition, getGlobalConfig } from '@embroider/macros';
const DEFAULT_MAX_CACHE_SIZE = 10_000;

/**
 * An LRUCache implementation with upsert semantics.
 *
 * This implementation is *not* generic, but focuses on
 * performance tuning for the string transformation cases
 * where the key maps to the value very simply.
 *
 * It takes a work function that should generate a new value
 * for a given key when called. It will be called when the key
 * is not found in the cache.
 *
 * It keeps track of the number of hits, misses, and ejections
 * in DEBUG envs, which is useful for tuning the cache size.
 *
 * This is an internal utility class for use by this module
 * and by `@warp-drive/utilities/string`. It is not intended
 * for use outside of these modules at this time.
 *
 * @internal
 */
class LRUCache {
  // debug stats

  constructor(doWork, size) {
    this.size = size || DEFAULT_MAX_CACHE_SIZE;
    this.state = new Map();
    this.doWork = doWork;
    if (macroCondition(getGlobalConfig().WarpDrive.env.DEBUG)) {
      this._hits = 0;
      this._misses = 0;
      this._ejected = 0;
    }
  }
  get(key) {
    const value = this.state.get(key);
    if (value) {
      if (macroCondition(getGlobalConfig().WarpDrive.env.DEBUG)) {
        this._hits++;
      }
      this.state.delete(key);
      this.state.set(key, value);
      return value;
    }
    if (macroCondition(getGlobalConfig().WarpDrive.env.DEBUG)) {
      this._misses++;
    }
    const newValue = this.doWork(key);
    this.set(key, newValue);
    return newValue;
  }
  set(key, value) {
    if (this.state.size === this.size) {
      for (const [k] of this.state) {
        if (macroCondition(getGlobalConfig().WarpDrive.env.DEBUG)) {
          this._ejected++;
        }
        this.state.delete(k);
        break;
      }
    }
    this.state.set(key, value);
  }
  clear() {
    this.state.clear();
    if (macroCondition(getGlobalConfig().WarpDrive.env.DEBUG)) {
      this._hits = 0;
      this._misses = 0;
      this._ejected = 0;
    }
  }
}
const STRING_DASHERIZE_REGEXP = /[ _]/g;
const STRING_DECAMELIZE_REGEXP = /([a-z\d])([A-Z])/g;
const STRING_DASHERIZE_CACHE = new LRUCache(key => key.replace(STRING_DECAMELIZE_REGEXP, '$1_$2').toLowerCase().replace(STRING_DASHERIZE_REGEXP, '-'));

/**
 * This is an internal utility function that converts a string
 * to a dasherized format. Library consumers should use the
 * re-exported version from `@warp-drive/utilities/string` instead.
 *
 * This version is only in this location to support a deprecated
 * behavior in the core package and will be removed in a future.
 *
 * @internal
 */
function dasherize(str) {
  return STRING_DASHERIZE_CACHE.get(str);
}
export { LRUCache, STRING_DASHERIZE_CACHE, dasherize };